name: "pull request"
on:
  pull_request:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'catalog.yaml'
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/liatrio-backstage

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'

      - name: Install build dependencies
        run: yarn install --frozen-lockfile

      - name: Build bundle
        run: yarn build

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME:${{ steps.tag.outputs.sha_short }} --label "runnumber=${GITHUB_RUN_ID}"
        env:
          DOCKER_BUILDKIT: 1
    outputs:
      docker_tag: ${{ steps.tag.outputs.sha_short }}
  fmt:
    name: "Terraform fmt check"
    runs-on: ubuntu-latest
    container: "hashicorp/terraform:0.14.10"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform fmt check
        run: terraform fmt -check -recursive
  validate:
    name: "Terraform validate check"
    runs-on: ubuntu-latest
    container: "hashicorp/terraform:0.14.10"
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Terraform validate check
        run: terraform validate
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: "1b4a4fed-fed8-4823-a8a0-3d5cea83d122"
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_NONPROD_SUBSCRIPTION_ID }}
          TF_VAR_acr_subscription_id: ${{ secrets.AZURE_NONPROD_SUBSCRIPTION_ID }}
          TF_VAR_gratibot_image: "${{ env.IMAGE_NAME }}:${{ needs.build.outputs.docker_tag }}"
          TF_VAR_environment: "nonprod"
  plan:
    name: "Terraform Nonprod plan"
    runs-on: ubuntu-latest
    container: "hashicorp/terraform:0.14.10"
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Plan Backstage staging deployment
        id: plan_gratibot_staging_deployment
        working-directory: tf
        run: |
          terraform init -backend-config=backends/nonprod.tf
          terraform plan -out plan.out
          terraform show -no-color plan.out > plan.txt
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: "1b4a4fed-fed8-4823-a8a0-3d5cea83d122"
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_NONPROD_SUBSCRIPTION_ID }}
          TF_VAR_acr_subscription_id: ${{ secrets.AZURE_NONPROD_SUBSCRIPTION_ID }}
          TF_VAR_gratibot_image: "${{ env.IMAGE_NAME }}:${{ needs.build.outputs.docker_tag }}"
          TF_VAR_environment: "nonprod"

      - name: Comment on pull request
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const output = `
            #### Terraform Nonprod Plan \`${{ steps.plan_gratibot_staging_deployment.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${fs.readFileSync('tf/plan.txt')}\`\`\`
            </details>`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Status
        if: contains(steps.*.outcome, 'failure')
        run: exit 1